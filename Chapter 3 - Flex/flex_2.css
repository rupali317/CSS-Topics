.parent:nth-of-type(1),
.parent:nth-of-type(2),
.parent:nth-of-type(3),
.parent:nth-of-type(4),
.parent:nth-of-type(5),
.parent:nth-of-type(6),
.parent:nth-of-type(7) {
  display: flex;
  gap: var(--space-1);
}

/* RRC: difference  between align items and align content */
/* align-content – Controls alignment when there are multiple rows/columns. */
.parent:nth-of-type(1) {
  display: flex;
  gap: var(--space-1); /* 16px */
  flex-wrap: wrap;
  height: var(--space-5); /* 300px */
  align-content: center;
}

/* flex-grow – how much extra space a flex item takes relative to other flex items inside a flex container. 
Use cases: expand items or not expand certain items when viewport is bigger*/
.parent:nth-of-type(2) .child:nth-child(2n) {
  flex-grow: 2;
}

.parent:nth-of-type(2) .child:nth-child(2n - 1) {
  flex-grow: 1;
}

/* How browsers allocate space? Checks the content size if there is no flex-basis defined. 
Flex-grow takes the remaining space and allocates according to the flex-grow values. If
there is no extra space then flex-grow will not apply  */

/* flex-shrink – Defines how items shrink when space is limited (container has a width and items has flex-basis) 
Use cases: Shrink items or not shrink certain items when viewport is smaller. You do not want a button to shrink so much that the text starts overflowing */
.parent:nth-of-type(3) {
  width: var(--space-6); /* 900px */
}

.parent:nth-of-type(3) .child {
  flex-basis: var(--space-5); /* 300px */
}

.parent:nth-of-type(3) .child:nth-child(2n) {
  flex-shrink: 3;
  /* flex-shrink: 0; */ /* Demo this */
}

.parent:nth-of-type(3) .child:nth-child(2n - 1) {
  flex-shrink: 1;
}

/* You can align individual items along the cross axis using align-self. For all items we use align-items */
.parent:nth-of-type(4) {
  height: var(--space-4); /* 200px */
}

.parent:nth-of-type(4) .child:nth-child(2n) {
  align-self: flex-end;
}

.parent:nth-of-type(4) .child:nth-child(2n-1) {
  align-self: flex-start;
}

/* order – Changes the order of flex items without altering HTML. 
Not ordering the html, just ordering the visual.
Order is 0 be default for all
Use case: Desktop follows one ordering but changes in mobile version (rearrange items in different layout/screen size) */
.parent:nth-of-type(5) .child:nth-child(1) {
  order: 3;
}

.parent:nth-of-type(5) .child:nth-child(2) {
  order: 4;
}

.parent:nth-of-type(5) .child:nth-child(3) {
  order: 1; /*Quiz: What happens if it is changed to order:3? How will the ordering work? */
}
/* Quiz: What happens if order:1 is changed to -1 and others are commented out (Explain with a real use case - shift only a sidebar to left in mobile) */

.parent:nth-of-type(5) .child:nth-child(4) {
  order: 2;
}

/*Comment out this*/
/* .parent:nth-of-type(4) .child:nth-child(1) {
  order: 2;
}

.parent:nth-of-type(4) .child:nth-child(2) {
  order: 5;
}

.parent:nth-of-type(4) .child:nth-child(3) {
  order: 4;
}

.parent:nth-of-type(4) .child:nth-child(4) {
  order: 3;
}

.parent:nth-of-type(4) .child:nth-child(5) {
  order: 1;
} */

/* flex-basis – Controls the default size of an item */
/* By default all flex-items have a flex-shrink of 1 and flex-grow of 0 */
/* Quiz: what happens if I add flex-shrink:0 ? */
.parent:nth-of-type(6) .child {
  flex-basis: var(--space-5); /* 300px */
}

/* flex is a shorthand of flex-grow, flex-shrink and flex-basis */
.parent:nth-of-type(7) .child {
  flex: 0 1 var(--space-4); /* 200px */
}

/* Tutorial: https://flexboxfroggy.com/ */
