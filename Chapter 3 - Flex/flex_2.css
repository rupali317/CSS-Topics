/*
Controlling Alignment & Spacing
- align-self – Adjusts alignment for a single item in a flex container.
- align-content – Controls alignment when there are multiple rows/columns.

Controlling Item Sizing

- flex-basis – Controls the default size of an item before it grows/shrinks.
- flex (shorthand) – Combines flex-grow, flex-shrink, and flex-basis.
- order – Changes the order of flex items without altering HTML.
*/

/* flex-grow – how much extra space a flex item takes relative to other flex items inside a flex container. 
Use cases: expand items or not expand certain items when viewport is bigger*/
.parent:nth-child(1) {
  display: flex;
  gap: var(--space-1);
}

.parent:nth-child(1) .child:nth-child(2n) {
  flex-grow: 2;
}

.parent:nth-child(1) .child:nth-child(2n - 1) {
  flex-grow: 1;
}

/* How browsers allocate space? Checks the content size if there is no flex-basis defined. 
Flex-grow takes the remaining space and allocates according to the flex-grow values. If
there is no extra space then flex-basis will not apply  */

/* flex-shrink – Defines how items shrink when space is limited (container has a width and items has flex-basis) 
Use cases: Shrink items or not shrink certain items when viewport is smaller. You do not want a button to shrink so much that the text starts overflowing */
.parent:nth-child(2) {
  display: flex;
  width: 900px;
  gap: var(--space-1);
}

.parent:nth-child(2) .child {
  flex-basis: 300px;
}

.parent:nth-child(2) .child:nth-child(2n) {
  flex-shrink: 3;
  /* flex-shrink: 0; */ /* Demo this */
}

.parent:nth-child(2) .child:nth-child(2n - 1) {
  flex-shrink: 1;
}

/*Calculate lunch*/
