/* Basic Selectors */
* {
  font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
}
p {
  color: blue;
}
.highlight {
  background-color: yellow;
}
#unique {
  font-weight: bold;
}

/* Combinators */
.parent p {
  color: red;
}
.parent > span > p {
  font-style: italic;
}
div + p {
  color: green;
}
div ~ p {
  text-decoration: underline;
}

/* Attribute Selectors */
input[placeholder] {
  border: 2px solid black;
}
a[title="CSS Link"] {
  color: purple;
}
/*RRC:Provide more examples*/

/* Pseudo-Classes */
.btn:hover {
  background-color: orange;
}
ul li:first-child {
  font-weight: bold;
}
ul li:last-child {
  font-style: italic;
}

/* Pseudo-Elements */
.intro::first-letter {
  font-size: 2em;
  color: red;
}
.quote::before {
  content: "“";
  color: gray;
}
/* .quote::before {
  content: "“";
  color: green;
} */
.quote::after {
  content: "”";
  color: gray;
}

/* RRC:Tag/Element, attributes (attribute name, attribute value), content */

/* RRC:Pseudo elements vs psuedo classes, use case,  */

/* 
### **What is a Pseudo-Element?**
A **pseudo-element** is a CSS feature that allows you to style specific parts of an element without adding extra HTML. They behave like real elements but don’t appear in the DOM.

### **Use Cases of Pseudo-Elements**
1. **Styling the First Letter or Line of Text**
   ```css
   p::first-letter {
     font-size: 2em;
     color: red;
   }
   ```
   - Used for drop caps in articles.

2. **Adding Decorative Content Before or After an Element**
   ```css
   .quote::before {
     content: '“';
   }
   .quote::after {
     content: '”';
   }
   ```
   - Used to add quotation marks without modifying the HTML.

3. **Styling Placeholder Text**
   ```css
   input::placeholder {
     color: gray;
   }
   ```
   - Used to style placeholder text in forms.

4. **Creating Visual Effects Without Extra HTML**
   ```css
   .button::after {
     content: ' →';
   }
   ```
   - Used for buttons with icons/text without adding additional elements.

### **Why Not Just Make Them HTML Elements?**
1. **Cleaner HTML** – Avoids unnecessary `<span>` or `<div>` elements just for styling.  
2. **Lightweight Styling** – Reduces DOM complexity and improves performance.  
3. **Enhances Readability** – Keeps HTML focused on structure, while CSS handles visual elements.

Would you like me to add more pseudo-element examples to your existing HTML?
*/

/* RRC - Specificity inline = 1000, id = 0100, class,attribute,pseudoclass = 0010, element,pseudoelements = 0001, universal selector=0000
   Why we aim for lower specificity. Explain the use case */

/* RRC - Uncomment .quote::before with green color */
