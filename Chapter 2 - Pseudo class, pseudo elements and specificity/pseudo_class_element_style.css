:root {
  /* Colors */
  --color-1: blue;
  --color-2: yellow;
  --color-3: red;
  --color-4: green;
  --color-5: purple;
  --color-6: orange;
  --color-7: gray;
  --color-8: black;

  /* Font family */
  --font-family-group-1: Cambria, Cochin, Georgia, Times, "Times New Roman",
    serif;

  /* Font size */
  --font-size-1: 2em;
  --font-size-2: 3em;
  --font-size-4: 4em;

  /* Font weight */
  --font-weight-bold: bold;

  /* Border width */
  --border-width-1: 2px;
}

/* https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements 
   ::before
   ::after 
   ::marker
   ::placeholder
   ::-webkit-scrollbar, ::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb
   ::-webkit-input-placeholder

   ::backdrop
   ::first-letter
   ::first-line
*/
/*------------------------------- Pseudo-Elements -------------------------------*/
.first-letter::first-letter,
.without-first-letter > span {
  /* Pseudo elements have the same specificty of an element = 1 point */
  /* Pseudo elements are not standalone elements. You need to select elements/classes/id before applying the pseudo element */
  font-size: var(--font-size-1);
  color: var(--color-3);
}

.without-first-line > span,
.first-line::first-line {
  color: var(--color-7);
}

.intro::first-line {
  color: var(--color-5);
}

.without-after-before > span {
  color: var(--color-1);
}

.after-before::before {
  content: "“";
  color: var(--color-1);
}

.after-before::after {
  content: "”";
  color: var(--color-1);
}

/* Quiz: and what do you think will happen? */
/* .after-before::before {
  content: "“";
  color: var(--color-3);
} */
/* Quiz: Now that we can easily have different colors for quotes using pseudi elements, 
how would you approach different colors without using pseudo elements and only using regular selectors? */
.without-after-before span.one {
  color: var(--color-1);
}
.without-after-before span.two {
  color: var(--color-3);
}
/*-------------------------------------------------------------------------------*/

/* https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes 
  :hover
  :active
  :focus
  :focus-within
  :focus-visible
  :nth-child()
  :empty
  :checked
  :not()
  :last-of-type
  :has()
  :nth-of-type()
  :first-child
  :last-child
  :disabled

  ::-webkit-scrollbar:vertical
*/

/*-------------------------------- Pseudo-Classes -------------------------------*/
.btn:hover {
  background-color: var(--color-6);
}
ul li:first-child {
  font-weight: var(--font-weight-bold);
}
ul li:last-child {
  font-style: italic;
}
/*-------------------------------------------------------------------------------*/

/* RRC:Pseudo elements vs psuedo classes, use case,  */

/* 
  ### **What is a Pseudo-Element?**
  A **pseudo-element** is a CSS feature that allows you to style specific parts of an element without adding extra HTML. 
  They behave like real elements but don’t appear in the DOM.
  
  ### **Use Cases of Pseudo-Elements**
  1. **Styling the First Letter or Line of Text**
     ```css
     p::first-letter {
       font-size: 2em;
       color: red;
     }
     ```
     - Used for drop caps in articles.
  
  2. **Adding Decorative Content Before or After an Element**
     ```css
     .quote::before {
       content: '“';
     }
     .quote::after {
       content: '”';
     }
     ```
     - Used to add quotation marks without modifying the HTML.
  
  3. **Styling Placeholder Text**
     ```css
     input::placeholder {
       color: gray;
     }
     ```
     - Used to style placeholder text in forms.
  
  4. **Creating Visual Effects Without Extra HTML**
     ```css
     .button::after {
       content: ' →';
     }
     ```
     - Used for buttons with icons/text without adding additional elements.
  
  ### **Why Not Just Make Them HTML Elements?**
  1. **Cleaner HTML** – Avoids unnecessary `<span>` or `<div>` elements just for styling.  
  2. **Lightweight Styling** – Reduces DOM complexity and improves performance.  
  3. **Enhances Readability** – Keeps HTML focused on structure, while CSS handles visual elements.
  
  Would you like me to add more pseudo-element examples to your existing HTML?
  */
/* RRC - Uncomment .quote::before with green color */
