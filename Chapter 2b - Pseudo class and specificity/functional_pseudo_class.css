/* https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes 
   Functional pseudo-classes
        :not() 
        :has()
*/

/*-------------------------------- Functional pseudo-classes --------------------------------*/
/* :not() matches any elements that are not part of the selectors */
/* section {
  padding: var(--space-1);
  border-bottom: var(--border-width-1) solid var(--color-7);
}

section:last-child {
  border-bottom: none;
} */
/* Below is a shortcut REMEMBER TO COMMENT OUT THE PREVIOUS TWO*/
/* :not() does not have a specificty. Whatever selector is part of the not raguments will have the specificity */
section:not(:last-child) {
  padding: var(--space-1);
  border-bottom: var(--border-width-1) solid var(--color-7);
}

/* :not(<complex-selector-list>), supports nesting */
/* <complex-selector-list> = class selctors, attribute selector, pseudo class*/
section ul li:not(:first-child, :last-child) {
  font-size: x-large;
}

/* Quiz: What will happen here? */
input:not([class]) {
  font-style: italic;
}

/* Quiz: What will happen here?
  Hint: :not() works on real selectors */
input:not(::placeholder) {
  color: var(--color-3); /* red */
}

/* We go from ancestor to descendants, is it possible to do so other way around? Here comes :has() */
tr:has(input:checked) {
  background-color: var(--color-4); /* green */
}

label:has(+ input:hover) {
  color: var(--color-3); /* red */
}
/*-------------------------------------------------------------------------------------------*/
